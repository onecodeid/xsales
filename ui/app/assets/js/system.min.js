import*as api from"./api_system.js";import*as api2 from"./api_common.min.js?t=as";import{URL,one_token,one_user,page_sizes}from"../../assets/js/global.js";export default{namespaced:!0,state:{search:"",search_status:0,search_error_message:"",menu_level_0:[],menu_level_1:[],menu_level_2:[],total_menu:0,bread_crumb:"",is_page_allowed:!0,dashboard:"",user:one_user(),one_token:one_token(),page_sizes:page_sizes(),menus:[],icons:[],drawer:!1,notif_unread:0,notif_total:0,notif_messages:[],drawer_notif:!1,wscon:null,notif_md5:"",audio:null,sound:"",notif_muted:!0,conf:{}},mutations:{set_common(state,v){let name=v[0],val=v[1];"string"==typeof val?eval(`state.${name} = "${val}"`):eval(`state.${name} = ${val}`)},update_bread_crumb(state,val){state.bread_crumb=val},update_dashboard(state,val){state.dashboard=val},update_page_allowed(state,val){state.is_page_allowed=val},update_search(state,val){state.search=val},update_search_error_message(state,status){state.search_error_message=status},update_search_status(state,status){state.search_status=status},update_menu_level_0(state,data){state.menu_level_0=data},update_menu_level_1(state,data){state.menu_level_1=data},update_menu_level_2(state,data){state.menu_level_2=data},set_menus(state,v){state.menus=v},set_icons(state,v){state.icons=v},set_drawer(state,v){state.drawer=v},set_drawer_notif(state,v){state.drawer_notif=v},set_notif_unread(state,v){state.notif_unread=v},set_notif_total(state,v){state.notif_total=v},set_notif_messages(state,v){state.notif_messages=v},set_notif_md5(state,v){state.notif_md5=v},set_wscon(state,v){state.wscon=v},set_audio(state,v){state.audio=v},set_notif_muted(state,v){state.notif_muted=v},set_conf(state,v){state.conf=v}},actions:{async search_menu_group(context){context.commit("update_search_status",1);try{let resp=await api.search_menu_group({token:one_token()});"OK"!=resp.status?(context.commit("update_search_status",3),context.commit("update_search_error_message",resp.message)):(context.commit("update_search_status",2),context.commit("update_search_error_message",""),context.commit("set_menus",resp.data[0]),context.commit("set_icons",resp.data[1]))}catch(e){context.commit("update_search_status",3),context.commit("update_search_error_message",e.message)}},async logout(){try{var resp=await axios.post(URL+"systm/user/logout",{token:one_token()});if(200!=resp.status)return{status:"ERR",message:resp.statusText};let data;return resp.data}catch(e){return{status:"ERR",message:e.message}}},async do_logout(context){let x;(async()=>{try{let resp;"OK"!=(await context.dispatch("logout")).status?alert("error"):(window.localStorage.removeItem("token"),window.localStorage.removeItem("user"),location.replace("../system-login/"))}catch(e){context.commit("update_login_status",3),context.commit("update_login_error_message",e.message)}})()},async get_notif_unread(context){},async set_notif_read(context){context.commit("update_search_status",1);try{let resp=await api.set_notif_read({token:one_token()});"OK"!=resp.status?(context.commit("update_search_status",3),context.commit("update_search_error_message",resp.message)):(context.commit("update_search_status",2),context.commit("update_search_error_message",""),context.dispatch("get_notif_unread"))}catch(e){context.commit("update_search_status",3),context.commit("update_search_error_message",e.message)}},async postme(context,d){let aurl=d.url,prm=d.prm,hdr=d.hdr,callback=d.callback,failback=d.failback;context.commit("set_common",["search_status",1]);try{prm.token=context.state.one_token;let resp=await api2.postme(aurl,prm,hdr);return"OK"!=resp.status?(context.dispatch("postme_fail",resp),failback&&failback(resp.message),resp):(context.dispatch("postme_success"),callback&&callback(resp.data),resp.data)}catch(e){context.dispatch("postme_fail",e),console.log(e),failback&&failback(e.message)}},async report_excel(context,prm){context.commit("set_common",["search_status",1]);try{prm.token=one_token();let resp=await api2.report_excel(prm.url,prm);"OK"!=resp.status?context.dispatch("postme_fail",resp):(context.dispatch("postme_success"),window.open(resp.data.report_url),context.commit("set_dialog_print",!1,{root:!0}))}catch(e){context.dispatch("postme_fail",e)}},async get_conf(context){context.dispatch("system/postme",{prm:{},url:"systm/conf/get_conf",callback:function(d){context.commit("set_conf",d)}},{root:!0})},postme_success(context){context.commit("set_common",["search_status",2]),context.commit("set_common",["search_error_message",""])},postme_fail(context,e){context.commit("set_common",["search_status",3]),context.commit("set_common",["search_error_message",e.message])}}};